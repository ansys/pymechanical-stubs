name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main
      - release/*

env:
  MAIN_PYTHON_VERSION: '3.10'
  PACKAGE_NAME: ansys-mechanical-stubs
  PACKAGE_NAMESPACE: ansys.mechanical.stubs
  DOCUMENTATION_CNAME: scripting.mechanical.docs.pyansys.com
  LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
  ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}
  ANSYS_WORKBENCH_LOGGING_CONSOLE: 0
  ANSYS_WORKBENCH_LOGGING: 0
  ANSYS_WORKBENCH_LOGGING_FILTER_LEVEL: 2
  NUM_CORES: 1
  MEILISEARCH_API_KEY: ${{ secrets.MEILISEARCH_API_KEY }}
  MEILISEARCH_HOST_URL: ${{ vars.MEILISEARCH_HOST_URL }}
  MEILISEARCH_PUBLIC_API_KEY: ${{ secrets.MEILISEARCH_PUBLIC_API_KEY }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: ansys/actions/code-style@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: Documentation style check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v4
        with:
          vale-config: doc/.vale.ini
          token: ${{ secrets.GITHUB_TOKEN }}

  checkout-repo:
    name: Checkout repository
    needs: [style, doc-style]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

  gen-stubs:
    name: Generate Mechanical stubs
    needs: [checkout-repo]
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/ansys/mechanical:${{ matrix.versions.image }}
      options: --entrypoint /bin/bash
    strategy:
      matrix:
        os: [ubuntu-latest]
        versions: [
          { image: '23.2.0', version: '232' },
          { image: '24.1.0', version: '241' }
        ]
        python-version: ['3.10']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        env:
          AWP_ROOTDV_DEV: /install/ansys_inc/v${{ matrix.versions.version }}
          ANSYSCL${{ matrix.versions.version }}_DIR: /install/ansys_inc/v${{ matrix.versions.version }}/licensingclient
        run: |
          apt update
          apt install --reinstall ca-certificates
          apt install software-properties-common -y
          add-apt-repository ppa:deadsnakes/ppa -y
          apt install python${{ matrix.python-version }} -y
          ln -s /usr/bin/python${{ matrix.python-version }} /usr/bin/python
          apt install python${{ matrix.python-version }}-venv -y
          apt install -y lsb-release mono-complete make git zip

          python -m ensurepip --default-pip
          pip install --upgrade pip
          python --version
          pip --version

          mkdir -p src/ansys/mechanical/stubs
          touch src/ansys/mechanical/stubs/__init__.py
          pwd
          ls -l
          pip install -e .[doc]
          pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org pip setuptools
          pip install --upgrade pip flit pytz tzdata ansys-pythonnet

      - name: Generate the mechanical stub files
        env:
          AWP_ROOTDV_DEV: /install/ansys_inc/v${{ matrix.versions.version }}
          ANSYSCL${{ matrix.versions.version }}_DIR: /install/ansys_inc/v${{ matrix.versions.version }}/licensingclient
        run: |
          python stub_generator/create_files.py > results.txt
        continue-on-error: True

      - name: Check stubs were generated
        run: |
          cat results.txt

          # Check if failure occurred
          output=$(grep -c "Done processing all mechanical stubs" results.txt)
          if [ $output -eq 1 ]; then
            echo "All mechanical stubs were created"
            exit 0
          else
            echo "There was an issue creating the mechanical stubs"
            exit 1
          fi

      - name: Upload v${{ matrix.versions.version }} stubs
        uses: actions/upload-artifact@v4
        if: matrix.python-version == env.MAIN_PYTHON_VERSION
        with:
          name: v${{ matrix.versions.version }}-stubs
          path: src/ansys/mechanical/stubs/v${{ matrix.versions.version }}
          retention-days: 7

  download-stubs:
    name: Download stubs to src/ansys/mechanical/stubs
    needs: [gen-stubs]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: [ '232', '241' ]
    steps:
      - name: Set up src directory
        run: mkdir -p src/ansys/mechanical/stubs

      - name: "Download the library artifacts from build-library step"
        uses: actions/download-artifact@v4
        with:
          name: v${{ matrix.versions }}-stubs
          path: src/ansys/mechanical/stubs/v${{ matrix.versions }}

  doc-build:
    name: Make html and markdown documentation
    needs: [download-stubs]
    runs-on: ubuntu-latest
    steps:
    - name: Create __init__.py in src/ansys/mechanical/stubs
      shell: python
      run: |
        import os
        subfolders = [ f.name for f in os.scandir("src/ansys/mechanical/stubs/") if f.is_dir() ]

        with open("src/ansys/mechanical/stubs/__init__.py", "w") as f:
            f.write('''try:
              import importlib.metadata as importlib_metadata
          except ModuleNotFoundError:  # pragma: no cover
              import importlib_metadata  # type: ignore

          __version__ = importlib_metadata.version("ansys-mechanical-stubs")
          """Patch version for the ansys-mechanical-stubs package."""

            ''')
          for folder in subfolders:
              f.write(f"from .{folder} import *")

    - name: Display init file
      run: cat src/ansys/mechanical/stubs/__init__.py

      # - name: Retrieve Mechanial version
      #   run: |
      #     pip install -e .
      #     echo "MECHANICAL_VERSION=$(python -c 'from ${{ env.PACKAGE_NAMESPACE }} import __version__; print(__version__)')" >> $GITHUB_ENV
      #     echo "Mechanical version is: $(python -c "from ${{ env.PACKAGE_NAMESPACE }} import __version__; print(__version__)")"


  # smoke-tests:
  #   name: Build and Smoke tests
  #   runs-on: ${{ matrix.os }}
  #   needs: [style]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, windows-latest, macos-latest]
  #       python-version: ['3.9', '3.10', '3.11', '3.12']
  #       should-release:
  #         - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
  #       exclude:
  #         - should-release: false
  #           os: macos-latest
  #   steps:
  #     - name: Build wheelhouse and perform smoke test
  #       uses: ansys/actions/build-wheelhouse@v6
  #       with:
  #         library-name: ${{ env.PACKAGE_NAME }}
  #         operating-system: ${{ matrix.os }}
  #         python-version: ${{ matrix.python-version }}

  # doc-build-markdown:
  #   name: Create markdown documentation
  #   needs: [style, doc-style]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, windows-latest]
  #       python-version: ['3.10', '3.11', '3.12']
  #   steps:
  #     - name: Generate markdown documentation
  #       run: |
  #         sphinx-build -M markdown doc/source doc/_build

  #     - name: Upload markdown documentation
  #       uses: actions/upload-artifact@v3
  #       if: matrix.python-version == env.MAIN_PYTHON_VERSION
  #       with:
  #         name: documentation-md
  #         path: doc/_build/markdown
  #         retention-days: 7

  #     - name: Upload Sphinx HTML documentation
  #       uses: actions/upload-artifact@v3
  #       if: matrix.python-version == env.MAIN_PYTHON_VERSION
  #       with:
  #         name: documentation-html
  #         path: doc/_build/html
  #         retention-days: 7

  # doc-build-html:
  #   name: Create html documentation
  #   needs: [style, doc-style]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, windows-latest]
  #       python-version: ['3.10', '3.11', '3.12']
  #   steps:
  #     - name: Create Sphinx documentation
  #       run: |
  #         make -C doc html

  # clean-documentation:
  #   name: Clean documentation
  #   needs: [doc-build-markdown, doc-build-html]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #       python-version: ['3.10']
  #   steps:
  #     - name: Clean ID in first row
  #       run: |
  #         python scripts/01-clean-id.py

  #     - name: Clean empty rows
  #       run: |
  #         python scripts/02-clean-empty-row.py

  #     - name: Create table of contents
  #       run: |
  #         python scripts/03-create-toc-from-html-mechanical.py

  #     - name: Add header to tables
  #       run: |
  #         python scripts/04-add-header-to-tables.py

  #     - name: Remove links in heading
  #       run: |
  #         python scripts/05-remove-link-in-heading.py

  #     - name: Upload to GitHub Artifacts
  #       if: matrix.python-version == env.MAIN_PYTHON_VERSION
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: toc-files
  #         path: output/

  # release-pypi-private:
  #   name: "Release to the private PyPI repository"
  #   if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
  #   runs-on: ubuntu-latest
  #   needs: [clean-documentation]
  #   steps:
  #     - name: "Release to the private PyPI repository"
  #       uses: ansys/actions/release-pypi-private@v4
  #       with:
  #         library-name: ${{ env.PACKAGE_NAME }}
  #         twine-username: "__token__"
  #         twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

  # # release-pypi-public:
  # #   name: "Release to the public PyPI repository"
  # #   if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
  # #   runs-on: ubuntu-latest
  # #   needs: [release-pypi-private]
  # #   steps:
  # #     - name: "Release to the public PyPI repository"
  # #       uses: ansys/actions/release-pypi-public@v4
  # #       with:
  # #         library-name: ${{ env.PACKAGE_NAME }}
  # #         twine-username: "__token__"
  # #         twine-token: ${{ secrets.PYPI_TOKEN }}

  # release-github:
  #   name: "Release to GitHub"
  #   if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
  #   runs-on: ubuntu-latest
  #   needs: [release-pypi-private]
  #   steps:
  #     - name: "Release to GitHub"
  #       uses: ansys/actions/release-github@v4
  #       with:
  #         library-name: ${{ env.PACKAGE_NAME }}

  # doc-deploy-dev:
  #   name: "Deploy development documentation"
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   needs: [clean-documentation]
  #   steps:
  #     - name: "Deploy development documentation"
  #       uses: ansys/actions/doc-deploy-dev@v4
  #       with:
  #         cname: ${{ env.DOCUMENTATION_CNAME }}
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         doc-artifact-name: 'documentation-html'

  # doc-index-dev:
  #   name: "Deploy dev index docs"
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   needs: [doc-deploy-dev]
  #   steps:
  #     - name: "Deploy the latest documentation index"
  #       uses: ansys/actions/doc-deploy-index@v6
  #       with:
  #         cname: ${{ env.DOCUMENTATION_CNAME }}/version/dev
  #         index-name: pymechanical-stubs-vdev
  #         host-url: ${{ env.MEILISEARCH_HOST_URL }}
  #         api-key: ${{ env.MEILISEARCH_API_KEY }}
  #         python-version: ${{ env.MAIN_PYTHON_VERSION }}

  # doc-deploy-stable:
  #   name: "Deploy stable documentation"
  #   if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
  #   runs-on: ubuntu-latest
  #   needs: [release-pypi-private, release-github]
  #   strategy:
  #     matrix:
  #       mechanical-version: ['24.1.0']
  #   steps:
  #     - name: "Deploy stable documentation"
  #       uses: ansys/actions/doc-deploy-stable@v4
  #       with:
  #         cname: ${{ env.DOCUMENTATION_CNAME }}
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         doc-artifact-name: 'documentation-html'

  # doc-index-stable:
  #   name: "Index the documentation and scrap using PyMeilisearch"
  #   if: github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   needs: [doc-deploy-stable]
  #   steps:
  #     - name: Scrape the stable documentation to PyMeilisearch
  #       run: |
  #         VERSION=$(python -c "from ${{ env.PACKAGE_NAMESPACE }} import __version__; print('.'.join(__version__.split('.')[:2]))")
  #         VERSION_MEILI=$(python -c "from ${{ env.PACKAGE_NAMESPACE }} import __version__; print('-'.join(__version__.split('.')[:2]))")
  #         echo "Calculated VERSION: $VERSION"
  #         echo "Calculated VERSION_MEILI: $VERSION_MEILI"

  #     - name: "Deploy the latest documentation index"
  #       uses: ansys/actions/doc-deploy-index@v4.1
  #       with:
  #         cname: "scripting.mechanical.docs.pyansys.com/version/$VERSION"
  #         index-name: "pymechanical-stubs-v$VERSION_MEILI"
  #         host-url: ${{ env.MEILISEARCH_HOST_URL }}
  #         api-key: ${{ secrets.MEILISEARCH_API_KEY }}
  #         doc-artifact-name: 'documentation-html'
  #         python-version: ${{ env.MAIN_PYTHON_VERSION }}
